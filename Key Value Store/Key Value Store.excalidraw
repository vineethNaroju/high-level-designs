{
  "type": "excalidraw",
  "version": 2,
  "source": "https://excalidraw.com",
  "elements": [
    {
      "id": "IGMxFX0cwWimB5ZUtK94i",
      "type": "text",
      "x": 512,
      "y": -73.49999999999994,
      "width": 361,
      "height": 34,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 656308709,
      "version": 245,
      "versionNonce": 141141355,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "Design Key Value store",
      "fontSize": 28,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 27
    },
    {
      "id": "pPqBqROK5QfNr0dNb9MFj",
      "type": "text",
      "x": -643,
      "y": 108.50000000000006,
      "width": 141,
      "height": 24,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1451607717,
      "version": 638,
      "versionNonce": 373077381,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "Requirements",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 19
    },
    {
      "id": "WObxZhA0nCMkbP62pjdGe",
      "type": "text",
      "x": -630,
      "y": 136.50000000000006,
      "width": 638,
      "height": 133,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1778979237,
      "version": 928,
      "versionNonce": 20386123,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "1. Operations : put(Key, Value) and get(Key)\n2. Tradeoff between Consistency and Availability\n3. Size of Key-Value pair < 10KB\n4. Store Big data\n5. High Availability: System responds quickly, even during failures.\n6. High Scalability: Support large data set.\n7. Automatic scaling, Tunable consistency, Low latency.",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 129
    },
    {
      "id": "5k_A8ruDn69dTx5qqjMXS",
      "type": "rectangle",
      "x": -655,
      "y": 106.00000000000006,
      "width": 667,
      "height": 181,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1635975205,
      "version": 790,
      "versionNonce": 350303211,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "Y-ML0jSYnWqtwmp9mv_PV",
      "type": "text",
      "x": -647,
      "y": 324.5000000000001,
      "width": 340,
      "height": 24,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 845731403,
      "version": 152,
      "versionNonce": 484886731,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "Single server Key-Value store",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 19
    },
    {
      "id": "6npKpX0mH5Oio7fRMi8D7",
      "type": "text",
      "x": -634,
      "y": 351.5000000000001,
      "width": 553,
      "height": 76,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 31721867,
      "version": 352,
      "versionNonce": 1848317835,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "1. Store key-value pairs in hash table in memory.\n2. Compress data, store only frequently used data in memory\n   rest in disk.\n3. We can quickly run out of capacity to support big data.",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 72
    },
    {
      "id": "g5vO1Z4jTBVW3cJkVIgLf",
      "type": "rectangle",
      "x": -654,
      "y": 324.0000000000001,
      "width": 583,
      "height": 116,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1254264171,
      "version": 354,
      "versionNonce": 1711898251,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "CO4qJVqD4hJ6KXPX8wPKB",
      "type": "text",
      "x": -645,
      "y": 477.5000000000001,
      "width": 129,
      "height": 24,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 287842405,
      "version": 133,
      "versionNonce": 168927077,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "CAP theorem",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 19
    },
    {
      "id": "M0XHATnaNJyRRjQ_78OZM",
      "type": "text",
      "x": -623,
      "y": 506.5000000000001,
      "width": 713,
      "height": 342,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1821699141,
      "version": 991,
      "versionNonce": 283522411,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "It's impossible for a distributed system to provide more than two of \nconsistency, availability and partition tolerance.\n1. Consistency: All clients read same data, no matter which node they\n   connect with.\n2. Availability: Any client that requests data gets a response even if\n   some nodes are down.\n3. Partition Tolerance: A communication break b/w nodes and system \n   continues to operate despite network partitions.\n\nSince network failure is unavoidable in real world, a CA system is to \nmake in real world.\n\nSay we have 3 replica nodes(n1->n2->n3->n1) and n3 goes down.\nFor CP, we have to block all writes to n1 and n2 to avoid data inconsistency\namong replicas. For AP, n1 and n2 will accept writes and data will be synced\nto n3 after network partition is resolved. \n\n",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 338
    },
    {
      "id": "dATeARikZrTegwUzx-tGr",
      "type": "rectangle",
      "x": -658,
      "y": 469.0000000000001,
      "width": 766,
      "height": 363,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 284317029,
      "version": 256,
      "versionNonce": 219116843,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "sIgw7PVYr5Szi8Kyc3KE6",
      "type": "text",
      "x": -646.257936507936,
      "y": 875.6468253968256,
      "width": 199,
      "height": 24,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1048069349,
      "version": 68,
      "versionNonce": 1710952043,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "System Components",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 19
    },
    {
      "id": "BKaWDW5dcWmhr_uxny6In",
      "type": "text",
      "x": -631.8134920634917,
      "y": 905.4246031746034,
      "width": 488,
      "height": 57,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 833860965,
      "version": 282,
      "versionNonce": 251284139,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "1. Data Partition 2.Data Replication 3. Consistency \n4. Inconsistency Resolution 5. Handling Failures \n6. Architecture Diagram 7. Write Path 8.Read Path",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 53
    },
    {
      "id": "ESyMjdneT1lOdjoSrhkTA",
      "type": "rectangle",
      "x": -656.2579365079362,
      "y": 870.7023809523812,
      "width": 523.3333333333334,
      "height": 115.55555555555543,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1015200581,
      "version": 167,
      "versionNonce": 1499305931,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "rikUaetk0BA8Ar_pWS9WU",
      "type": "text",
      "x": 212.24206349206207,
      "y": 113.2023809523809,
      "width": 164,
      "height": 24,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 443892069,
      "version": 446,
      "versionNonce": 1025446693,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "Data Partition",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 19
    },
    {
      "id": "OZSxWVEOOYkj0Fin0wzz5",
      "type": "text",
      "x": 224.32539682539544,
      "y": 144.32738095238074,
      "width": 769,
      "height": 95,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 654292363,
      "version": 871,
      "versionNonce": 1986715051,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "1. Not feasible to store data in single server, so store them in multiple servers.\n2. We have to distribute data evenly and minimize data re-distribution due to\n   node addition or removal.\n3. We will use Consistent Hashing for Automatic Scaling and Heterogeneity (virtual\n   nodes ~ server capacity) ",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 91
    },
    {
      "id": "55K0DKC7trdLRrRLU154G",
      "type": "rectangle",
      "x": 201.82539682539544,
      "y": 108.82738095238092,
      "width": 805.0000000000002,
      "height": 147.5,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 620671141,
      "version": 597,
      "versionNonce": 1225680491,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "K9wjNz_MahogzyEkUnVQv",
      "type": "line",
      "x": 172.3651180087502,
      "y": 77.61067061874913,
      "width": 1.3557640816085268,
      "height": 996.8198030891332,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "round",
      "seed": 865632101,
      "version": 326,
      "versionNonce": 326649899,
      "isDeleted": false,
      "boundElementIds": null,
      "points": [
        [
          0,
          0
        ],
        [
          1.3557640816085268,
          996.8198030891332
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": null,
      "endBinding": null,
      "startArrowhead": null,
      "endArrowhead": null
    },
    {
      "id": "1C8X9jB6eCcqfefs_qMqv",
      "type": "text",
      "x": 212.10317460317327,
      "y": 296.6884920634919,
      "width": 188,
      "height": 24,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 433932613,
      "version": 87,
      "versionNonce": 2079342699,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "Data Replication",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 19
    },
    {
      "id": "dzlKAH7iQquhIwRO5AUns",
      "type": "text",
      "x": 220.71428571428436,
      "y": 326.7440476190474,
      "width": 778,
      "height": 76,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1969301957,
      "version": 459,
      "versionNonce": 713199557,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "1. For High Availability and Reliability, data is async replicated over N servers.\n2. We choose first N servers nearest to Key-Hash on Hash Ring and store data copies\n   on them. Since virtual nodes may belong to less than N unique servers, we choose\n   only unique servers during clockwise walk. ",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 72
    },
    {
      "id": "HbFz_vieKs8WVC53N-lGW",
      "type": "rectangle",
      "x": 200.85317460317322,
      "y": 291.8134920634918,
      "width": 807.777777777778,
      "height": 133.33333333333337,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1339871589,
      "version": 213,
      "versionNonce": 854352139,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "XfisX2H10TRkwmrxu-joP",
      "type": "text",
      "x": 216.4087301587291,
      "y": 464.535714285714,
      "width": 129,
      "height": 24,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 614146693,
      "version": 97,
      "versionNonce": 1853617989,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "Consistency",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 19
    },
    {
      "id": "Wgaq9crlmc3RkQtzyjw3G",
      "type": "text",
      "x": 229.7420634920624,
      "y": 496.5357142857141,
      "width": 919,
      "height": 266,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1780256133,
      "version": 1398,
      "versionNonce": 1087753099,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "Replicated data must be synchronized across replicas. Quorum consensus can guarantee\nconsistency for both read and write operations.\n1. Say we have N - Replicas, W - Write Quorum size, R - Read Quorum size. For a Write\n   operation to be successful, it should be acknowledged from W replicas. For a successful\n   Read operations, it must wait for response from at least R replicas.\n2. Coordinator(COD) acts as a proxy between client and replica nodes. The configuration of N, W\n   & R is a tradeoff between Latency and Consistency.\n3. If W = 1 or R = 1, COD returns quick. If W or R > 1, Better Consistency - COD must wait for\n   response from Slowest Replica.\n4. If W + R > N, Strong Consistency (since W, R have at least one overlap node, N = 3, W = R = 2).\n5. If R = 1 and W = N, Fast Read. If W = 1 and R = N, Fast Write.\n6. if W + R <= N, Strong Consistency is not guaranteed.\n\n ",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 262
    },
    {
      "id": "MZkW42g-j9Mn-iAyDnW56",
      "type": "text",
      "x": 213.07539682539584,
      "y": 774.5357142857141,
      "width": 211,
      "height": 24,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1369102021,
      "version": 260,
      "versionNonce": 2083544773,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "Consistency Models",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 19
    },
    {
      "id": "Jka_JBixWGoBvmt-j7iMt",
      "type": "text",
      "x": 230.8531746031736,
      "y": 806.5357142857139,
      "width": 816,
      "height": 190,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2071704747,
      "version": 1053,
      "versionNonce": 1688050699,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "1. Strong Consistency - Any Read returns the most updated Write Data Item value.\n2. Weak Consistency - Subsequent Reads may not see the most updated Write value.\n3. Eventual Consistency - Given enough time, all updates are propagated and all \n   replicas are consistent.\nStrong consistency is achieved by forcing a replica not to accept new Read / Write\nuntil every Replica has agreed on Current Write (Not ideal for Highly Available, as\nit could block new operations).\nDynamoDB and Cassandra adopt Eventual Consistency. Due to Concurrent Writes, Eventual \nConsistency allows inconsistent values to enter the system and force the client to read\nvalues to reconcile.",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 186
    },
    {
      "id": "eHTv0ri5gsMVzHGN2rdoV",
      "type": "rectangle",
      "x": 201.96428571428476,
      "y": 461.81349206349176,
      "width": 962.2222222222222,
      "height": 276.66666666666674,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1671088069,
      "version": 333,
      "versionNonce": 812779435,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "4rxl4LhgZeEbKxXrByAXx",
      "type": "rectangle",
      "x": 205.29761904761796,
      "y": 770.7023809523805,
      "width": 866.6666666666667,
      "height": 235.55555555555566,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 1548524683,
      "version": 278,
      "versionNonce": 1204410955,
      "isDeleted": false,
      "boundElementIds": null
    },
    {
      "id": "rY6DfLYKtnoAtMER8coO4",
      "type": "line",
      "x": 1237.4700104050785,
      "y": 78.87347267299583,
      "width": 2.1723913574621747,
      "height": 998.4955749460516,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "round",
      "seed": 663254763,
      "version": 178,
      "versionNonce": 73223269,
      "isDeleted": false,
      "boundElementIds": null,
      "points": [
        [
          0,
          0
        ],
        [
          -2.1723913574621747,
          998.4955749460516
        ]
      ],
      "lastCommittedPoint": null,
      "startBinding": null,
      "endBinding": null,
      "startArrowhead": null,
      "endArrowhead": null
    },
    {
      "id": "3GAbDJA0fDqFXAyW7DOoI",
      "type": "text",
      "x": 1284.2976190476159,
      "y": 121.75793650793612,
      "width": 422,
      "height": 24,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 67050341,
      "version": 213,
      "versionNonce": 813077675,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "Inconsistency Resolution: Versioning",
      "fontSize": 20,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 19
    },
    {
      "id": "96J33Y7NW1zXC-X12vx2Q",
      "type": "text",
      "x": 1297.6309523809493,
      "y": 154.86904761904725,
      "width": 956,
      "height": 342,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 2,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 694465093,
      "version": 2089,
      "versionNonce": 661299077,
      "isDeleted": false,
      "boundElementIds": null,
      "text": "1. Replication gives High Availability but causes inconsistencies among Replicas.\n2. Versioning and Vector Clocks are helpful to resolve them. Versioning treats each data\n   modification as new immutable version of data.\n3. Say we have n1 and n2 replica nodes with n1.map(name, john) and n2.map(name, john). If different\n   clients update n1.put(name, ray) and n2.put(name, rose). There is no clear way to resolve\n   conflict. A Versioning system can detect conflicts and reconcile them.\n4. A Vector Clock is <Server, Version> associated with a Data Item.\n5. Assume a Vector Clock D[<S1,V1>,....<Sn, Vn>], D is Data Item, V1 is Version Counter and S1 is\n   Server Number. If D is written to server Si, then increment Vi if <Si,Vi> exits else create\n   new entry <Si,1>.\n6. A version X is ancestor of version Y, if version counters for each participant in vector clock Y is\n   greater than or equal to the ones in version X. (X - D[<s0,1>,<s1,1>], Y - D[<s0,1>, <s1,2>])\n7. A version X is sibling (conflict exits) of Y if there is any participant in Y vector clock, who has\n   counter less than its corresponding counter in X. (X - D[<s0,1>, <s1,2>], Y - D[<s0,2>, <s1,1>])\n8. Vector clocks add complexity to client (It needs to implement conflict resolution code)\n9. Vector clock pairs could grow rapidly and we can set a threshold to keep recent pairs. Due to this\n   descendant relationship can't be determined accurately. (Refer DynamoDB paper)\n ",
      "fontSize": 16,
      "fontFamily": 3,
      "textAlign": "left",
      "verticalAlign": "top",
      "baseline": 338
    },
    {
      "id": "1mQnfOGm1lZ06HIQUig3a",
      "type": "rectangle",
      "x": 1272.0753968253946,
      "y": 113.48015873015865,
      "width": 1005.5555555555557,
      "height": 377.7777777777777,
      "angle": 0,
      "strokeColor": "#000000",
      "backgroundColor": "transparent",
      "fillStyle": "hachure",
      "strokeWidth": 1,
      "strokeStyle": "solid",
      "roughness": 1,
      "opacity": 100,
      "groupIds": [],
      "strokeSharpness": "sharp",
      "seed": 2119486091,
      "version": 289,
      "versionNonce": 1370801995,
      "isDeleted": false,
      "boundElementIds": null
    }
  ],
  "appState": {
    "gridSize": null,
    "viewBackgroundColor": "#ffffff"
  },
  "files": {}
}